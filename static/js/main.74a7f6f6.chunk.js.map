{"version":3,"sources":["components/SignIn/SignIn.js","components/Navigation/Navigation.js","components/Logo/Logo.js","components/SearchBar/SearchBar.js","components/Divider/Divider.js","components/Thumbnail/Thumbnail.js","components/View/View.js","App.js","serviceWorker.js","index.js","components/Register/Register.js","components/Upload/Upload.js","logo.svg"],"names":["Web3","require","contract","providers","HttpProvider","eth","Contract","rpc","func","a","call","message","startsWith","run","registerEmail","registerPassword","methods","verifyUser","result","getArrayLength","console","log","testFunction","SignIn","props","onEmailChange","event","setState","target","value","onPasswordChange","onSubmitSignIn","state","alert","onRouteChange","this","className","src","logo","style","paddingBottom","height","width","alt","id","fontFamily","for","autocomplete","type","name","onChange","paddingTop","onClick","color","React","Component","Navigation","paddingRight","Logo","paddingLeft","SearchBar","md","icon","placeholder","aria-label","Divider","Thumbnail","imglink","title","videoLink","onVideoView","altsrc","fontSize","View","controls","particlesOptions","particles","number","density","enable","value_area","size","random","line_linked","enable_auto","distance","opacity","length","i","getVideo","App","route","createVideos","videos","split","videoTitle","thumbnailHash","videoHash","thumbnailLink","concat","push","Videos","params","Upload","Register","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","Tx","Transaction","web3","fromAddress","privateKey","Buffer","createRawTransaction","registerChannel","txData","gasLimit","utils","toHex","gasPrice","to","from","data","addUser","encodeABI","sendRawTransaction","getTransactionCount","txCount","newNonce","transaction","nonce","chain","sign","serializedTx","serialize","toString","sendSignedTransaction","isExisting","onChannelChange","onSubmitRegister","ipfs","host","port","protocol","addVideo","onTitleChange","onThumbnailUpload","preventDefault","file","files","reader","FileReader","readAsArrayBuffer","onloadend","thumbnailBuffer","onVideoUpload","videoBuffer","onSubmit","status","disabled","add","path","backgroundColor","borderRadius","module","exports"],"mappings":"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","file":"static/js/main.74a7f6f6.chunk.js","sourcesContent":["import React, { Component, Button } from 'react';\r\nimport Particles from 'react-particles-js';\r\nimport logo from '../../logo.svg';\r\nimport { MDBBtn } from 'mdbreact';\r\nimport Tachyons from 'tachyons';\r\nimport './SignIn.css';\r\n\r\n// NOTES: \r\n//    - Smart contract address for 'users' contract required here!\r\n//    - WARNING -- SECURITY VULNERABILITY: as notified by browser, password is improperly exposed\r\n//    - Improve custom warning and error notifications\r\n\r\n/*\r\nThe code below connects to Ropsten Ethereum network via Infura node and creates a contract object for 'users' contract\r\n*/\r\n\r\nconst Web3 = require('web3');\r\n\r\nconst web3 = new Web3(new Web3.providers.HttpProvider('https://ropsten.infura.io/v3/7b973cc4e4f04c9081ead788d635c300'));\r\n\r\nconst fromAddress = '0x02B87aE689fa9282820D0936df8bA5e0a4152222';\r\n\r\nconst contractAddress = '0xd4B33a85e8c872F82C9B7785210F2B2C4dBef945';\r\nconst abi = [{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_channelName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_password\",\"type\":\"string\"}],\"name\":\"addUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"deleteUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getArrayLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getUser\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_channelName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"}],\"name\":\"isExisting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userArray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"channelName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_password\",\"type\":\"string\"}],\"name\":\"verifyUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\nconst contract = new web3.eth.Contract(abi, contractAddress); // to see contract contents, navigate to '\\contracts\\users.txt'\r\n\r\n/*\r\nFunction below handles asynchronous function calls to, in this case, 'users' contract\r\n*/\r\n\r\nasync function rpc(func) {\r\n    while (true) {\r\n        try {\r\n            return await func.call();\r\n        }\r\n        catch (error) {\r\n            if (!error.message.startsWith(\"Invalid JSON RPC response\"))\r\n                throw error;\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\nFunction below utilizes 'users' smart contract function to verify that user is registered.\r\nReturned output is either 'true' or 'false'\r\n*/\r\n\r\nasync function run(registerEmail, registerPassword) {\r\n    const result = await rpc(contract.methods.verifyUser(registerEmail, registerPassword));\r\n    return result;\r\n}\r\n\r\n/*\r\nTest function console logs number of registered users\r\n*/\r\n\r\nasync function testFunction() {\r\n    const result = await rpc(contract.methods.getArrayLength());\r\n    console.log(result);\r\n}\r\n\r\ntestFunction();\r\n\r\nclass SignIn extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      registerEmail: '', // contains email address inputted by user\r\n      registerPassword: '' // contains password inputted by user\r\n    }\r\n  }\r\n  onEmailChange = (event) => {\r\n    this.setState({registerEmail: event.target.value})\r\n  }\r\n  onPasswordChange = (event) => {\r\n    this.setState({registerPassword: event.target.value})\r\n  }\r\n  onSubmitSignIn = async () => {\r\n    if (this.state.registerEmail == '' || this.state.registerPassword == '') {\r\n      alert(\"Empty input fields!\");\r\n    } else if (!await run(this.state.registerEmail,this.state.registerPassword)) {\r\n      alert(\"Incorrect email or password!\");\r\n    } else {\r\n      this.props.onRouteChange('home'); // navigate to home page\r\n    }\r\n  }\r\n\r\n  render() { \r\n    const { onRouteChange } = this.props;\r\n    return (\r\n      <div className=\"container\">\r\n        <img src={logo} className=\"\" style={{paddingBottom: 30, height: 300, width: 300}} alt=\"logo\" />\r\n        <article className=\"br3 ba dark-gray b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">        \r\n          <main className=\"pa4 black-80\">\r\n            <form className=\"measure\">\r\n              <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n                <legend style={{fontFamily:\"Roboto Mono\"}} className=\"f4 fw6 ph0 mh0\">Sign In</legend>\r\n                <div className=\"mt3\">\r\n                  <label style={{fontFamily:\"Roboto Mono\"}} className=\"db fw6 lh-copy f6\" for=\"email-address\">Email</label>\r\n                  <input autocomplete=\"off\" className=\"pa2 input-reset ba bg-transparent hover-bg-black w-100\" type=\"email\" name=\"email-address\"  id=\"email-address\" onChange={this.onEmailChange}/>\r\n                </div>\r\n                <div className=\"mv3\">\r\n                  <label style={{fontFamily:\"Roboto Mono\"}} className=\"db fw6 lh-copy f6\" for=\"password\">Password</label>\r\n                  <input autocomplete=\"off\" className=\"b pa2 input-reset ba bg-transparent hover-bg-black w-100\" type=\"password\" name=\"password\"  id=\"password\" onChange={this.onPasswordChange}/>\r\n                </div>\r\n              </fieldset>\r\n              <div style={{paddingTop: 20}}>\r\n                <MDBBtn onClick={this.onSubmitSignIn} style={{fontFamily:\"Roboto Mono\", width: 300}} color=\"mdb-color\">CLICK TO JOIN IPFS NETWORK</MDBBtn>\r\n              </div>\r\n              <div style={{paddingTop: 10}}>\r\n                <MDBBtn onClick={() => onRouteChange('register')} style={{fontFamily:\"Roboto Mono\", width: 300}} color=\"red\">REGISTER</MDBBtn>\r\n              </div>\r\n            </form>\r\n          </main>\r\n        </article>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SignIn;","import React, { Fragment } from \"react\";\r\nimport { MDBBtn } from \"mdbreact\";\r\n\r\nconst Navigation = ({onRouteChange}) => {\r\n\treturn (\r\n\t    <Fragment>\r\n\t    <div style={{ paddingRight: '20px', paddingTop: '10px'}}>\r\n\t      <MDBBtn style={{fontFamily:\"Roboto Mono\"}} onClick={() => onRouteChange('upload')} color=\"red\">Upload</MDBBtn>\r\n\t      <MDBBtn style={{fontFamily:\"Roboto Mono\"}} onClick={() => onRouteChange('signin')} color=\"mdb-color\">Sign-Out</MDBBtn>\r\n\t    </div>\r\n\t    </Fragment>\r\n\t);\r\n}\r\n\r\nexport default Navigation;","import React from \"react\";\r\nimport logo from '../../logo.svg'\r\nimport './Logo.css'\r\n\r\nconst Logo = () => {\r\n\treturn (\r\n\t\t<div style={{ paddingLeft: '20px'}}> \r\n\t\t\t<img className=\"logo\" style={{height: 100, width: 100 }} alt='logo' src={logo}/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Logo;","import React from \"react\";\r\nimport { MDBCol, MDBIcon } from \"mdbreact\";\r\nimport './SearchBar.css';\r\n\r\nconst SearchBar = () => {\r\n\treturn (\r\n    <MDBCol className=\"enlarge\" md=\"6\" style={{paddingTop: '3px', paddingLeft: '70px'}}>\r\n      <form className=\"form-inline mt-4 mb-4\">\r\n        <MDBIcon icon=\"search\" />\r\n        <input style={{fontFamily:\"Roboto Mono\"}} className=\"form-control form-control-sm ml-3 w-75\" type=\"text\" placeholder=\"Search\" aria-label=\"Search\" />\r\n      </form>\r\n    </MDBCol>\r\n\t);\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './Divider.css';\r\n\r\nconst Divider = () => {\r\n\treturn (\r\n    <div>\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-12\">\r\n          <div className=\"section-title\">\r\n            <h1> Videos</h1>\r\n            <div className=\"divider\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\t);\r\n}\r\n\r\nexport default Divider;","import React from 'react';\r\nimport Tachyons from 'tachyons';\r\nimport './Thumbnail.css';\r\n\r\n// NOTES: \r\n//\t\t- Should load thumbnails more optimally and together. Consider limiting size -- see Elite Dangerous thumbnail\r\n//\t\t- Consider uploading gifs\r\n\r\nclass Thumbnail extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\timglink: props.imglink,\r\n\t\t\ttitle: props.title,\r\n            videoLink: props.videoLink\r\n\t\t}\r\n\t}\r\n\r\n    /*\r\n    Contained within render function below is functionality that sends video link of video that user clicked on to App.js.\r\n    This information is later passed to 'View' component\r\n    */\r\n\r\n    render() {\r\n    \tconst { onRouteChange, onVideoView } = this.props;\r\n    \treturn (\r\n    \t\t<div onClick={() => { onRouteChange('view'); onVideoView(this.state.videoLink)}} className=\"bg-light-gray dib br3 pa3 ma5 grow bw2 shadow-5 container4\">\r\n    \t\t\t<img altsrc='thumbnail' src={this.state.imglink} className='container3'/>\r\n    \t\t\t<div>\r\n    \t\t\t\t<h2 style={{fontFamily:\"Roboto Mono\", paddingTop: 15, fontSize: \"16px\"}}>{this.state.title}</h2>\r\n    \t\t\t</div>\r\n    \t\t</div>\r\n\t\t);\r\n    }\r\n }\r\n\r\nexport default Thumbnail;","import React, { Fragment } from \"react\";\r\nimport { MDBBtn } from \"mdbreact\";\r\n\r\nclass View extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tvideoLink: props.videoLink\r\n\t\t}\r\n\t}\r\n\r\n  render() {\r\n    const { onRouteChange } = this.props;\r\n    return (\r\n      <div>\r\n        <Fragment>\r\n\t\t\t\t  <div style={{paddingBottom: '120px'}} className=\"navigation-bar-2\">\r\n            <MDBBtn onClick={() => onRouteChange('home')} color=\"mdb-color\">Home</MDBBtn>\r\n          </div>\r\n        </Fragment>\r\n      \t<video width = '900px' height = '505px' controls>\r\n      \t\t<source src={this.state.videoLink}/>\r\n  \t\t\t\t<p>This browser does not support the video element.</p>\r\n  \t\t\t</video>\r\n      </div>\r\n\t\t);\r\n  }\r\n}\r\n\r\nexport default View;","import React, { Component } from 'react';\r\nimport Particles from 'react-particles-js';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport SignIn from './components/SignIn/SignIn';\r\nimport Register from './components/Register/Register';\r\nimport Navigation from './components/Navigation/Navigation';\r\nimport Logo from './components/Logo/Logo';\r\nimport SearchBar from './components/SearchBar/SearchBar';\r\nimport Divider from './components/Divider/Divider';\r\nimport Thumbnail from './components/Thumbnail/Thumbnail';\r\nimport Upload from './components/Upload/Upload';\r\nimport View from './components/View/View';\r\n\r\n// NOTES: \r\n//    - Smart contract address for 'playlist' contract required here!\r\n//    - Search bar does not actually work (also decide whether it should redirect to new page or filter)\r\n//    - Render uploaded videos left to right\r\n//    - Intelligently render new, uploaded videos without having to reload the page\r\n\r\n/*\r\nThe code below connects to Ropsten Ethereum network via Infura node and creates a contract object for 'playlist' contract\r\n*/\r\n\r\nconst Web3 = require('web3');\r\nconst web3 = new Web3(new Web3.providers.HttpProvider('https://ropsten.infura.io/v3/7b973cc4e4f04c9081ead788d635c300'));\r\nconst contractAddress = '0x0447031221801f53dEbf8ba99A11d5e564D4d574';\r\nconst abi = [{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_thumbnailHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_videoHash\",\"type\":\"string\"}],\"name\":\"addVideo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getArrayLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getVideo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_thumbnailHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_videoHash\",\"type\":\"string\"}],\"name\":\"isExisting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"videoArray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"thumbnailHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"videoHash\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\nconst contract = new web3.eth.Contract(abi, contractAddress); // to see contract contents, navigate to '\\contracts\\playlist.txt'\r\n\r\n/*\r\n'particleOptions' defines user settings for 'react-particles-js'\r\n*/\r\n\r\nconst particlesOptions = {\r\n  particles: {\r\n    number: {\r\n      value: 80,\r\n      density: {\r\n        enable: true,\r\n        value_area: 800\r\n      }\r\n    },\r\n    color: {\r\n      value: \"#000000\"\r\n    },\r\n    size: {\r\n      value: 3,\r\n      random: true\r\n    },\r\n    line_linked: {\r\n      enable_auto: true,\r\n      distance: 150,\r\n      color: \"#000000\",\r\n      opacity: 0.0,\r\n      width: 1\r\n    }\r\n  }\r\n}\r\n\r\n/*\r\nFunction below handles asynchronous function calls to, in this case, 'playlist' contract\r\n*/\r\n\r\nasync function rpc(func) {\r\n    while (true) {\r\n        try {\r\n            return await func.call();\r\n        }\r\n        catch (error) {\r\n            if (!error.message.startsWith(\"Invalid JSON RPC response\"))\r\n                throw error;\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\nTest function console logs all playlist information to user, including playlist length, video titles, thumbnail hashes, and video hashes\r\n*/\r\n\r\nasync function testFunction() {\r\n    var result = await rpc(contract.methods.getArrayLength());\r\n    console.log(result);\r\n    var length = result;\r\n    var i;\r\n    for (i = 0; i < length; i++) {\r\n      result = await rpc(contract.methods.getVideo(i));\r\n      console.log(result);\r\n    }\r\n}\r\n\r\ntestFunction();\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      route: 'signin', // handles and captures routing state. Begin at sign in form\r\n      videoLink: '' // used to pass IPFS video link to 'View' component\r\n    }\r\n  }\r\n  onRouteChange = (route) => {\r\n    this.setState({route: route});\r\n  }\r\n  onVideoView = (videoLink) => {\r\n    this.setState({videoLink: videoLink});\r\n  }\r\n  componentDidMount() {\r\n    this.createVideos(); // retrieve video thumbnails and titles after DOM has rendered\r\n  }\r\n\r\n  /*\r\n  Function below retrieves thumbnail, video, and video title information from 'playlist' contract and constructs an array of 'Thumbnail' components.\r\n  Functionality was created in such a way so that render never has to return a promise\r\n  */\r\n\r\n  createVideos = async () => {\r\n    let videos = [];\r\n    var videoTitle;\r\n    var thumbnailHash; var thumbnailLink;\r\n    var videoHash; var videoLink;\r\n    var result;\r\n    var stringex;\r\n    var length = await rpc(contract.methods.getArrayLength()); // get number of videos uploaded to website\r\n    for (var i = 0; i < length; i++) {\r\n      result = await rpc(contract.methods.getVideo(i)); // contract function returns a string containing video title, thumbnail hash, and video hash\r\n      result = result.split(\"/\");\r\n      videoTitle = result[0];\r\n      thumbnailHash = result[1];\r\n      videoHash = result[2];\r\n      stringex = \"https://ipfs.io/ipfs/\"\r\n      thumbnailLink = stringex.concat(thumbnailHash); // construct link to thumbnail that users can navigate to\r\n      videoLink = stringex.concat(videoHash); // construct link to video that users can navigate to\r\n      videos.push(<Thumbnail onRouteChange={this.onRouteChange} onVideoView={this.onVideoView} imglink={thumbnailLink} title={videoTitle} videoLink={videoLink}/> );\r\n    }\r\n    this.setState({\r\n      Videos: videos\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Particles className='particles' params={particlesOptions} />\r\n          { this.state.route !== 'signin' & this.state.route !== 'register'\r\n          ? ( this.state.route === 'home'\r\n            ? <div>\r\n                <div className=\"navigation-bar\">\r\n                  <Logo />\r\n                  <SearchBar />\r\n                  <Navigation onRouteChange={this.onRouteChange} />\r\n                </div>\r\n                <Divider />\r\n                {this.state.Videos}\r\n              </div>\r\n            : ( this.state.route === 'view'\r\n              ? <View onRouteChange={this.onRouteChange} videoLink={this.state.videoLink}/>\r\n              : <Upload onRouteChange={this.onRouteChange} /> ))\r\n          : ( this.state.route === 'signin'\r\n            ? <SignIn onRouteChange={this.onRouteChange}/>\r\n            : <Register onRouteChange={this.onRouteChange}/> )\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport '@fortawesome/fontawesome-free/css/all.min.css'; // part of mdbreact import process\r\nimport 'bootstrap-css-only/css/bootstrap.min.css'; // part of mdbreact import process\r\nimport 'mdbreact/dist/css/mdb.css'; // part of mdbreact import process\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React, { Component, Button } from 'react';\r\nimport Particles from 'react-particles-js';\r\nimport logo from '../../logo.svg';\r\nimport { MDBBtn } from 'mdbreact';\r\nimport Tachyons from 'tachyons';\r\nimport './Register.css';\r\n\r\n// NOTES: \r\n//    - Smart contract address for 'users' contract required here!\r\n//    - WARNING -- SECURITY VULNERABILITY: file contains private key information!\r\n//    - Improve custom warning and error notifications\r\n\r\n/*\r\nThe code below connects to Ropsten Ethereum network via Infura node and creates a contract object for 'users' contract.\r\nThe code also contains private key information of account responsible for paying for all contract state changes\r\n*/\r\n\r\nconst Web3 = require('web3');\r\nconst Tx = require('ethereumjs-tx').Transaction; // facilitates signing and processing of raw and signed transactions\r\n\r\nconst web3 = new Web3(new Web3.providers.HttpProvider('https://ropsten.infura.io/v3/7b973cc4e4f04c9081ead788d635c300'));\r\n\r\nconst fromAddress = '0x02B87aE689fa9282820D0936df8bA5e0a4152222';\r\nconst privateKey = new Buffer('f6a3b9d820da379739e5cdc0fc8deab210772a21de8ff1c5b9fe832dee1f8c8b', 'hex');\r\n\r\nconst contractAddress = '0xd4B33a85e8c872F82C9B7785210F2B2C4dBef945';\r\nconst abi = [{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_channelName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_password\",\"type\":\"string\"}],\"name\":\"addUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"deleteUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getArrayLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getUser\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_channelName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"}],\"name\":\"isExisting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userArray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"channelName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_password\",\"type\":\"string\"}],\"name\":\"verifyUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\nconst contract = new web3.eth.Contract(abi, contractAddress);\r\n\r\n/*\r\nThe function 'createRawTransaction' contains transaction-related information for the creation of a raw, unsigned transaction.\r\nThe function also encodes the data for a function call to 'users' smart contract that adds user channel, email, and password information to array \r\n*/\r\n\r\nfunction createRawTransaction(registerChannel, registerEmail, registerPassword) {\r\n  const txData = {\r\n    gasLimit: web3.utils.toHex(3000000),\r\n    gasPrice: web3.utils.toHex(10e9),\r\n    to: contractAddress,\r\n    from: fromAddress,\r\n    data: contract.methods.addUser(registerChannel, registerEmail, registerPassword).encodeABI()\r\n  }\r\n  sendRawTransaction(txData);\r\n}\r\n\r\n/*\r\nThe function 'sendRawTransaction' signs raw transaction with inputted private key so that new contract state can finally be processed and confirmed to blockchain\r\n*/\r\n\r\nconst sendRawTransaction = txData => web3.eth.getTransactionCount(fromAddress).then(txCount => {\r\n  const newNonce = web3.utils.toHex(txCount);\r\n  const transaction = new Tx({ ...txData, nonce: newNonce }, { chain: 'ropsten' });\r\n  transaction.sign(privateKey);\r\n  const serializedTx = transaction.serialize().toString('hex');\r\n  return web3.eth.sendSignedTransaction('0x' + serializedTx);\r\n})\r\n\r\n/*\r\nFunction below handles asynchronous function calls to, in this case, 'users' contract\r\n*/\r\n\r\nasync function rpc(func) {\r\n    while (true) {\r\n        try {\r\n            return await func.call();\r\n        }\r\n        catch (error) {\r\n            if (!error.message.startsWith(\"Invalid JSON RPC response\"))\r\n                throw error;\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\nFunction below utilizes 'users' smart contract function to check to see whether user is already registered.\r\nReturned output is either 'true' or 'false'\r\n*/\r\n\r\nasync function run(registerChannel, registerEmail) {\r\n    const result = await rpc(contract.methods.isExisting(registerChannel, registerEmail));\r\n    return result;\r\n}\r\n\r\nclass Register extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      registerChannel: '', // contains channel name inputed by user\r\n      registerEmail: '', // contains email address inputted by user\r\n      registerPassword: '' // contains password inputted by user\r\n    }\r\n  }\r\n  onChannelChange = (event) => {\r\n    this.setState({registerChannel: event.target.value})\r\n  }\r\n  onEmailChange = (event) => {\r\n    this.setState({registerEmail: event.target.value})\r\n  }\r\n  onPasswordChange = (event) => {\r\n    this.setState({registerPassword: event.target.value})\r\n  }\r\n  onSubmitRegister = async () => {\r\n    if (this.state.registerChannel == '' || this.state.registerEmail == '' || this.state.registerPassword == '') {\r\n      alert(\"Empty input fields!\");\r\n    } else if (await run(this.state.registerChannel,this.state.registerEmail)) {\r\n      alert(\"Channel name or email address already registered!\");\r\n    } else {\r\n      createRawTransaction(this.state.registerChannel, this.state.registerEmail, this.state.registerPassword);\r\n      this.props.onRouteChange('home'); // navigate to home page\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { onRouteChange } = this.props;\r\n    return (\r\n      <div className=\"container\">\r\n        <img src={logo} className=\"\" style={{paddingBottom: 30, height: 300, width: 300}} alt=\"logo\" />\r\n        <article className=\"br3 ba dark-gray b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">        \r\n          <main className=\"pa4 black-80\">\r\n            <form className=\"measure\">\r\n              <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n                <legend style={{fontFamily:\"Roboto Mono\"}} className=\"f4 fw6 ph0 mh0\">Register</legend>\r\n                <div className=\"mt3\">\r\n                  <label style={{fontFamily:\"Roboto Mono\"}} className=\"db fw6 lh-copy f6\" for=\"email-address\">Channel</label>\r\n                  <input autocomplete=\"off\" className=\"pa2 input-reset ba bg-transparent hover-bg-black w-100\" type=\"email\" name=\"email-address\"  id=\"email-address\" onChange={this.onChannelChange}/>\r\n                </div>\r\n                <div className=\"mt3\">\r\n                  <label style={{fontFamily:\"Roboto Mono\"}} className=\"db fw6 lh-copy f6\" for=\"email-address\">Email</label>\r\n                  <input autocomplete=\"off\" className=\"pa2 input-reset ba bg-transparent hover-bg-black w-100\" type=\"email\" name=\"email-address\"  id=\"email-address\" onChange={this.onEmailChange}/>\r\n                </div>\r\n                <div className=\"mv3\">\r\n                  <label style={{fontFamily:\"Roboto Mono\"}} className=\"db fw6 lh-copy f6\" for=\"password\">Password</label>\r\n                  <input autocomplete=\"off\" className=\"b pa2 input-reset ba bg-transparent hover-bg-black w-100\" type=\"password\" name=\"password\"  id=\"password\" onChange={this.onPasswordChange}/>\r\n                </div>\r\n              </fieldset>\r\n              <div style={{paddingTop: 20}}>\r\n                <MDBBtn onClick={this.onSubmitRegister} style={{fontFamily:\"Roboto Mono\", width: 300}} color=\"mdb-color\">CLICK TO REGISTER</MDBBtn>\r\n              </div>\r\n              <div style={{paddingTop: 10}}>\r\n                <MDBBtn onClick={() => onRouteChange('signin')} style={{fontFamily:\"Roboto Mono\", width: 300, paddingRight: 63}} color=\"red\"><i className=\"arrow left\"></i><h style={{paddingLeft: 20}}>SIGN-IN</h></MDBBtn>\r\n              </div>\r\n            </form>\r\n          </main>\r\n        </article>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Register;","import React, { Fragment, TextField } from \"react\";\r\nimport { MDBBtn } from \"mdbreact\";\r\nimport './Upload.css';\r\nimport { ethers } from \"ethers\";\r\n\r\n// NOTES: \r\n//    - Smart contract address for 'playlist' contract required here!\r\n//    - WARNING -- SECURITY VULNERABILITY: file contains private key information!\r\n//    - Need loading wheel and completion status, and then (potentially) automatic redirect\r\n//    - Manage Infura file size limits (consider using ffmpeg)\r\n//    - Improve arrow bound animation (keyframes not working)\r\n//    - Improve custom warning and error notifications\r\n//    - Add functionality that prevents navigation to home page while user's video is uploading\r\n//    - Notification for duplicate videos and thumbnails not working, but the IPFS network seems to recognize this (indicated by slow returns of hashes). See if this is reflected within application\r\n//    - Some video uploads return error but content still seems to be uploaded to IPFS network. On second try, transaction is processed\r\n//    - Alter opacity of disabled button\r\n//    - State change seems to be occuring on button submit\r\n//    - Provide better notification and error handling in the event of upload failure\r\n//    - Notify user of upload completion only after transaction has been confirmed\r\n\r\n/*\r\nThe code below connects to Infura IPFS node via 'ipfs-http-client' library\r\n*/\r\n\r\nconst ipfsClient = require('ipfs-http-client');\r\nconst ipfs = new ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });\r\n\r\n/*\r\nThe code below connects to Ropsten Ethereum network via Infura node and creates a contract object for 'playlist' contract.\r\nThe code also contains private key information of account responsible for paying for all contract state changes\r\n*/\r\n\r\nconst Web3 = require('web3');\r\nconst Tx = require('ethereumjs-tx').Transaction;\r\n\r\nconst web3 = new Web3(new Web3.providers.HttpProvider('https://ropsten.infura.io/v3/7b973cc4e4f04c9081ead788d635c300'));\r\n\r\nconst fromAddress = '0x02B87aE689fa9282820D0936df8bA5e0a4152222';\r\nconst privateKey = new Buffer('f6a3b9d820da379739e5cdc0fc8deab210772a21de8ff1c5b9fe832dee1f8c8b', 'hex');\r\n\r\nconst contractAddress = '0x0447031221801f53dEbf8ba99A11d5e564D4d574';\r\nconst abi = [{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_thumbnailHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_videoHash\",\"type\":\"string\"}],\"name\":\"addVideo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getArrayLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getVideo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_thumbnailHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_videoHash\",\"type\":\"string\"}],\"name\":\"isExisting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"videoArray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"thumbnailHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"videoHash\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\nconst contract = new web3.eth.Contract(abi, contractAddress);\r\n\r\n/*\r\nThe function 'createRawTransaction' contains transaction-related information for the creation of a raw, unsigned transaction.\r\nThe function also encodes the data for a function call to 'playlist' smart contract that adds video title, thumbnail hashes, and video hashes to array \r\n*/\r\n\r\nfunction createRawTransaction(videoTitle, thumbnailHash, videoHash) {\r\n  const txData = {\r\n    gasLimit: web3.utils.toHex(3000000),\r\n    gasPrice: web3.utils.toHex(10e9),\r\n    to: contractAddress,\r\n    from: fromAddress,\r\n    data: contract.methods.addVideo(videoTitle, thumbnailHash, videoHash).encodeABI()\r\n  }\r\n  sendRawTransaction(txData);\r\n}\r\n\r\n/*\r\nThe function 'sendRawTransaction' signs raw transaction with inputted private key so that new contract state can finally be processed and confirmed to blockchain\r\n*/\r\n\r\nconst sendRawTransaction = txData => web3.eth.getTransactionCount(fromAddress).then(txCount => {\r\n  const newNonce = web3.utils.toHex(txCount);\r\n  const transaction = new Tx({ ...txData, nonce: newNonce }, { chain: 'ropsten' });\r\n  transaction.sign(privateKey);\r\n  const serializedTx = transaction.serialize().toString('hex');\r\n  return web3.eth.sendSignedTransaction('0x' + serializedTx)\r\n})\r\n\r\n/*\r\nFunction below handles asynchronous function calls to, in this case, 'playlist' contract\r\n*/\r\n\r\nasync function rpc(func) {\r\n    while (true) {\r\n        try {\r\n            return await func.call();\r\n        }\r\n        catch (error) {\r\n            if (!error.message.startsWith(\"Invalid JSON RPC response\"))\r\n                throw error;\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\nFunction below utilizes 'playlist' smart contract function to check to see whether thumbnail or video have already been uploaded.\r\nReturned output is either 'true' or 'false'\r\n*/\r\n\r\nasync function run(thumbnailHash, videoHash) {\r\n    const result = await rpc(contract.methods.isExisting(thumbnailHash, videoHash));\r\n    return result;\r\n}\r\n\r\nclass Upload extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      status: 'Submit', // manages text contained within submit button\r\n      videoTitle: '', // contains video title inputed by user\r\n      thumbnailBuffer: '', // holds thumbnail buffer that is then processed and uploaded to IPFS\r\n      videoBuffer: '', // holds video buffer that is then processed and uploaded to IPFS\r\n      thumbnailHash: '', // contains thumbnail hash\r\n      videoHash: '' // contains video hash\r\n    }\r\n  }\r\n  onTitleChange = (event) => {\r\n    this.setState({videoTitle: event.target.value})\r\n  }\r\n  onThumbnailUpload = (event) => {\r\n    event.preventDefault()\r\n    const file = event.target.files[0]\r\n    const reader = new window.FileReader()\r\n    reader.readAsArrayBuffer(file)\r\n    reader.onloadend = () => {\r\n      this.setState({ thumbnailBuffer: Buffer(reader.result) })\r\n      console.log('thumbnailBuffer', this.state.thumbnailBuffer)\r\n    }\r\n  }\r\n  onVideoUpload = (event) => {\r\n    event.preventDefault()\r\n    const file = event.target.files[0]\r\n    const reader = new window.FileReader()\r\n    reader.readAsArrayBuffer(file)\r\n    reader.onloadend = () => {\r\n      this.setState({ videoBuffer: Buffer(reader.result) })\r\n      console.log('videoBuffer', this.state.videoBuffer)\r\n    }\r\n  }\r\n  onSubmit = async (event) => {\r\n    event.preventDefault()\r\n    if (this.state.videoTitle == '' || this.state.thumbnailBuffer == '' || this.state.videoBuffer == '') {\r\n      alert(\"No video title, attached thumbnail, or attached video!\");\r\n    } else if (await run(this.state.thumbnailHash, this.state.videoHash)) {\r\n      alert(\"Thumbnail and/or video already exists!\");\r\n    } else {\r\n      this.setState({status: 'Uploading...'})\r\n      document.getElementById(\"myBtn\").disabled = true; // disable submit button\r\n      for await (const file of ipfs.add(this.state.thumbnailBuffer)) {\r\n        this.setState({ thumbnailHash: file.path })\r\n        console.log('thumbnailHash', this.state.thumbnailHash)\r\n      }\r\n      for await (const file of ipfs.add(this.state.videoBuffer)) {\r\n        this.setState({ videoHash: file.path })\r\n        console.log('videoHash', this.state.videoHash)\r\n        this.setState({status: 'Done!'}) // notify user of completion after both thumbnail and video have been uploaded to IPFS\r\n      }\r\n      createRawTransaction(this.state.videoTitle, this.state.thumbnailHash, this.state.videoHash);\r\n    }\r\n  }\r\n  render() {\r\n    const { onRouteChange } = this.props;\r\n    return (\r\n      <div>\r\n        <Fragment>\r\n          <div className=\"navigation-bar-2\">\r\n            <MDBBtn onClick={() => onRouteChange('home')} color=\"mdb-color\">Home</MDBBtn>\r\n          </div>\r\n        </Fragment>\r\n        <div className=\"section-title\">\r\n          <h1 style={{fontFamily:\"Roboto Mono\", paddingBottom: \"40px\"}}>Upload your video below</h1>\r\n          <a className=\"bounce fa fa-arrow-down fa-2x\" style={{paddingBottom:'20px'}}></a>\r\n          <div style={{paddingLeft: '10%', backgroundColor: 'rgba(0,0,0,0.2)', borderRadius:'20px', paddingTop: '60px', paddingBottom: '40px', paddingRight:'80px'}}>\r\n            <form className=\"form-inline\" style={{paddingBottom: '40px'}}>\r\n              <h6 style={{fontFamily:\"Roboto Mono\"}}>Video Title:</h6>\r\n              <input style={{fontFamily:\"Roboto Mono\"}} className=\"form-control form-control-sm ml-3 w-75\" type=\"text\" placeholder=\"\" aria-label=\"Search\" onChange={this.onTitleChange}/>\r\n            </form>\r\n            <form className=\"form-inline\" style={{paddingBottom: '20px'}}>\r\n              <h6 style={{fontFamily:\"Roboto Mono\"}}> Thumbnail: </h6>\r\n              <input style={{fontFamily:\"Roboto Mono\", paddingLeft:'60px', fontSize: '15px'}} type='file' onChange={this.onThumbnailUpload}/>\r\n            </form>\r\n            <form className=\"form-inline mt-4 mb-4\">\r\n              <h6 style={{fontFamily:\"Roboto Mono\"}}> Video File: </h6>\r\n              <input style={{fontFamily:\"Roboto Mono\", paddingLeft:'51px', fontSize: '15px'}} type='file' onChange={this.onVideoUpload}/>\r\n            </form>\r\n            <form style={{paddingTop: '20px'}}>\r\n              <input onClick={this.onSubmit} id='myBtn' style={{fontFamily:\"Roboto Mono\", fontSize: '15px'}} type='button' value={this.state.status}/>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Upload;\r\n\r\n\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.2b470564.svg\";"],"sourceRoot":""}